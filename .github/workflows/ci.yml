name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Validate Swift package
      run: swift package dump-package
      
    - name: Build project
      run: swift build --configuration release
      
    - name: Run build script
      run: |
        chmod +x build_standalone_app.sh
        ./build_standalone_app.sh
        
    - name: Run basic functionality tests
      run: |
        chmod +x scripts/test_basic_functionality.sh
        ./scripts/test_basic_functionality.sh
        
    - name: Upload app artifact
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: VaciPlayer-${{ github.sha }}
        path: VaciPlayer.app
        retention-days: 7

  lint:
    name: Lint
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint --version
        swiftlint lint --strict --reporter github-actions-logging
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        # Check for sensitive information in code
        echo "üîç Checking for sensitive patterns..."
        
        # Check for hardcoded secrets (basic patterns)
        if grep -r -i "password\|secret\|key\|token" Sources/ --include="*.swift" | grep -v "// " | grep -v "func\|var\|let\|struct\|class\|enum"; then
          echo "‚ö†Ô∏è  Potential sensitive information found"
          exit 1
        fi
        
        # Check for TODO/FIXME security items
        if grep -r -i "TODO.*security\|FIXME.*security\|XXX.*security" Sources/ --include="*.swift"; then
          echo "‚ö†Ô∏è  Security TODOs found"
          exit 1
        fi
        
        echo "‚úÖ No obvious security issues found"

  documentation:
    name: Documentation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation
      run: |
        # Verify important files exist
        test -f README.md
        test -f CLAUDE.md
        test -f Package.swift
        
        # Check if README has basic content
        if ! grep -q "VaciPlayer" README.md; then
          echo "‚ö†Ô∏è  README.md should contain project description"
          exit 1
        fi
        
        echo "‚úÖ Documentation checks passed"

  performance:
    name: Performance Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build release version
      run: swift build --configuration release
      
    - name: Check binary size
      run: |
        BINARY_PATH=".build/release/VaciPlayer"
        if [ -f "$BINARY_PATH" ]; then
          SIZE=$(stat -f%z "$BINARY_PATH")
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "üìä Binary size: ${SIZE_MB}MB"
          
          # Warn if binary is too large (arbitrary limit: 50MB)
          if [ $SIZE_MB -gt 50 ]; then
            echo "‚ö†Ô∏è  Binary size is quite large: ${SIZE_MB}MB"
          else
            echo "‚úÖ Binary size is reasonable"
          fi
        else
          echo "‚ùå Binary not found"
          exit 1
        fi

  compatibility:
    name: macOS Compatibility
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check minimum macOS version
      run: |
        # Check Package.swift for macOS version
        if grep -q "macOS(.v14)" Package.swift; then
          echo "‚úÖ Minimum macOS version: 14.0 (Sonoma)"
        else
          echo "‚ö†Ô∏è  Check macOS version requirement in Package.swift"
        fi
        
        # Check Info.plist for minimum system version
        if [ -f "VaciPlayer.app/Contents/Info.plist" ]; then
          if grep -q "14.0" VaciPlayer.app/Contents/Info.plist; then
            echo "‚úÖ Info.plist minimum system version correctly set"
          fi
        fi